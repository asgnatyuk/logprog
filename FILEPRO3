% Copyright
/*
Студенты, группы,
факультеты, старосты,
стипендии, успеваемость
*/

implement main
    open core, file, stdio

class facts - studentyNFI
    студент : (string Номер_студ_билета, string ФИО, string Телефон, integer Группа).
    группа : (string Напраление, integer Номер).
    список_старост : (string Номер_студ_билета_старосты, string ФИО_старосты, string Телефон_старосты, integer Группа).
    предмет : (integer Id, string Название, integer Напраление).
    все_оценки : (string Оценки).

clauses
    студент("1032215421", "Абдулфазов Мансур", "89167854532", 1).
    студент("1032216443", "Айрапетян Мария Сергеевна", "89186714665", 1).
    студент("1032205541", "Алламе Ормиз", "89169789687", 1).
    студент("1032216433", "Аристова Арина Олеговна", "89185678943", 1).
    студент("1032216432", "Бабенко Артём Сергеевич", "89197576893", 1).
    студент("1032212964", "Бекбузарова Роза Алисхановна", "88005553535", 1).
    студент("1032214711", "Бердыев Эзиз", "88007775656", 1).
    студент("1032216434", "Гайдамака Елизавета Александровна", "89195445634", 1).
    студент("1032198039", "Гань Чжаолун", "87009898578", 1).
    студент("1032216438", "Гарут Александр Игоревич", "88005553636", 1).
    студент("1032216444", "Гнатюк Анастасия Станиславовна", "88003335656", 1).
    студент("1032219249", "Гэинэ Андрей", "89169157898", 1).
    студент("1032217044", "Коняева Марина Александровна", "88009999999", 1).
    студент("1032216436", "Кузнецов Василий Юрьевич", "89169998989", 2).
    студент("1032216446", "Лебедева Ольга Андреевна", "88007887878", 2).
    студент("1032216447", "Легиньких Галина Андреевна", "89169136754", 2).
    студент("1032215469", "Негматуллаев Бежан Шухратович", "89197654979", 2).
    студент("1032216437", "Парфёнова Елизавета Евгеньевна", "89167854588", 2).
    студент("1032216449", "Перевощиков Даниил Алексеевич", "88007773773", 2).
    студент("1032216441", "Рытов Алексей Константинович", "89198785321", 2).

    группа("Фундаментальная информатика и информационные технологии", 1).
    группа("Прикладная информатика", 2).

    список_старост("1032217044", "Коняева Марина Александровна", "88009999999", 1).
    список_старост("1032216446", "Лебедева Ольга Андреевна", "88007887878", 2).

    предмет(1, "Логпрог", 1).
    предмет(2, "Вычислительные системы", 1).
    предмет(3, "Java", 1).
    предмет(4, "Иностранный язык", 2).
    предмет(5, "Физическая культура", 2).
    предмет(6, "Естествознание", 2).

    все_оценки("2").
    все_оценки("3").
    все_оценки("4").
    все_оценки("5").

% работа_со_списками
class predicates
    длина_списка : (List*) -> integer N.
    сумма_списка : (integer* List) -> integer N.
    среднее : (integer* List) -> real N determ.
    максимальное : (integer* List, integer Max [out]) determ.
    минимальное : (integer* List, integer Min [out]) determ.

clauses
    длина_списка([]) = 0.
    длина_списка([_ | T]) = длина_списка(T) + 1.

    сумма_списка([]) = 0.
    сумма_списка([H | T]) = сумма_списка(T) + H.

    среднее(T) = сумма_списка(T) / длина_списка(T) :-
        длина_списка(T) > 0.

    максимальное([Max], Max).

    максимальное([H1, H2 | T], Max) :-
        H1 >= H2,
        максимальное([H1 | T], Max).

    минимальное([Min], Min).

    минимальное([H1, H2 | T], Min) :-
        H1 <= H2,
        минимальное([H1 | T], Min).

% генерация_и_вывод_списков
class predicates
    вывести_список : (integer*) determ.
    вывести_список : (string*) determ.
    вывести_список : (main::studentyNFI*) determ.
    список_первой_группы : (integer Группа) -> main::studentyNFI* List determ.
    список_второй_группы : (integer Группа) -> main::studentyNFI* List determ.
    сумма_оценок_всех_студентов_первой_группы : (integer Группа) -> integer Sum.
    сумма_оценок_всех_студентов_второй_группы : (integer Группа) -> integer Sum.
    средняя_оценка_студентов_первой_группы : (integer Группа) -> real Res determ.
    средняя_оценка_студентов_второй_группы : (integer Группа) -> real Res determ.
    максимальная_оценка_первой_группы : (integer Группа) -> integer Res determ.
    минимальная_оценка_второй_группы : (integer Группа) -> integer Res determ.

clauses
    вывести_список([H | T]) :-
        write(H),
        nl,
        вывести_список(T).

    список_первой_группы(1) = List :-
        List = [ студент(Номер_студ_билета, ФИО, Телефон, 1) || студент(Номер_студ_билета, ФИО, Телефон, 1) ].

    список_второй_группы(2) = List :-
        List = [ студент(Номер_студ_билета, ФИО, Телефон, 2) || студент(Номер_студ_билета, ФИО, Телефон, 2) ].

    сумма_оценок_всех_студентов_первой_группы(1) = Sum :-
        Sum = сумма_списка([ Оценки || футболист(_, _, Оценки, 1) ]).

    сумма_оценок_всех_студентов_первой_группы(2) = Sum :-
        Sum = сумма_списка([ Оценки || футболист(_, _, Оценки, 2) ]).

    средняя_оценка_студентов_первой_группы(1) = Res :-
        Res = среднее([ Оценки || футболист(_, _, Оценки, 1) ]).

    средняя_оценка_студентов_второй_группы(2) = Res :-
        Res = среднее([ Оценки || футболист(_, _, Оценки, 2) ]).

    максимальная_оценка_первой_группы(1) = Max :-
        максимальное([ Оценки || футболист(_, _, Оценки, 1) ], Max),
        Res = Max.

    минимальная_оценка_второй_группы(2) = Min :-
        минимальное([ Оценка || футболист(_, _, Оценка, 2) ], Min),
        Res = Min.

class predicates
    /*состав : (string Название_блюда) nondeterm.
    исп_пр : (string Название_продукта) nondeterm.
    калорийность : (string Название_блюда) nondeterm.
    калор_расш : (string Название_блюда) failure.*/
    давайте_задействуем_программу : ().
    вывести_старост : ().
    каждый_студент_первой_группы : ().
    каждый_студент_второй_группы : ().
    оценки_первой_группы : ().
    оценки_второй_группы : ().
    отличники_и_хорошисты_первой_группы : ().
    отличники_и_хорошисты_второй_группы : ().
    число_девять : ().
    число_десять : ().
    число_одиннадцать : ().
    число_двенадцать : ().
    число_тринадцать : ().
    число_четырнадцать : ().
    число_пятнадцать : ().
    число_шеснадцать : ().

clauses
    каждый_студент_первой_группы() :-
        студент(Студак, ФиО, Тел, 1),
        write(Студак, "|", ФиО, "|", Тел),
        nl.
        /*fail.*/

    каждый_студент_второй_группы() :-
        студент(Студак, ФиО, Тел, 2),
        write(Студак, "|", ФиО, "|", Тел),
        nl.
        /*fail.*/

    вывести_старост() :-
        список_старост(Номер_студ_билета, Имя, Тел, Группа),
        write(Имя, "|", Номер_студ_билета, "|", Группа),
        nl.
        /*fail.*/

    оценки_первой_группы() :-
        студент(Студак, ФиО, Тел, 1),
        все_оценки(Оценочка),
        предмет(Номер, Предмет, 1),
        write(Студак, "|", Оценочка, "|", Предмет),
        nl.
        /*fail.*/

    оценки_второй_группы() :-
        студент(Студак, ФиО, Тел, 2),
        все_оценки(Оценочка),
        предмет(Номер, Предмет, 2),
        write(Студак, "|", Оценочка, "|", Предмет),
        nl.
        /*fail.*/

    отличники_и_хорошисты_первой_группы() :-
        предмет(Номер, Предмет, 1),
        студент(Студак, ФиО, Тел, 1),
        все_оценки(Оценки),
        if Оценки = "4" then
            write(Предмет, "|", ФиО, "|", 1, "|", Оценки)
        elseif Оценки = "5" then
            write(Предмет, "|", ФиО, "|", 1, "|", Оценки)
        end if,
        nl.
        /*fail.*/

    отличники_и_хорошисты_второй_группы() :-
        предмет(Номер, Предмет, 2),
        студент(Студак, ФиО, Тел, 2),
        все_оценки(Оценки),
        if Оценки = "4" then
            write(Предмет, "|", ФиО, "|", 2, "|", Оценки)
        elseif Оценки = "5" then
            write(Предмет, "|", ФиО, "|", 2, "|", Оценки)
        end if,
        nl.
        /*fail.*/

    число_девять() :-
        Сlist = список_первой_группы(1),
        write(Сlist),
        nl,
        вывести_список(Plist),
        fail.

    число_десять() :-
        Сlist = список_второй_группы(2),
        write(Сlist),
        nl,
        вывести_список(Plist),
        fail.

    число_одиннадцать() :-
        студент(_, _, _, 1),
        write("Сумма оценок первой группы равна ", сумма_оценок_всех_студентов_первой_группы(1)),
        fail.

    число_двенадцать() :-
        студент(_, _, _, 2),
        write("Сумма оценок второй группы равна ", сумма_оценок_всех_студентов_второй_группы(2)),
        fail.

    число_тринадцать() :-
        студент(_, ФИО, _, 1),
        write("Средний балл студентов первой группы у студентов ", ФИО, " равен ", средняя_оценка_студентов_первой_группы(1)),
        fail.

    число_четырнадцать() :-
        студент(_, ФИО, _, 2),
        write("Средний балл студентов второй группы у студентов", ФИО, " равен ", средняя_оценка_студентов_второй_группы(2)),
        fail.

    число_пятнадцать() :-
        студент(_, ФИО, _, 1),
        write("Максимальный балл первой группы у студента", ФИО, " равен ", максимальная_оценка_первой_группы(1)),
        fail.

    число_шеснадцать() :-
        студент(_, ФИО, _, 2),
        write("Минимальный балл второй группы у студента", ФИО, " равен ", минимальная_оценка_второй_группы(1)),
        fail.

    давайте_задействуем_программу() :-
        write("Привет! У меня есть некий список моих одногруппников. Давай поработаем с ними? :)"),
        nl,
        write("Выбирай, что будем мы с тобой делать?"),
        nl,
        write("1 - Вывести список всех студентов"),
        nl,
        write("2 - Вывести только первую группу"),
        nl,
        write("3 - Вывести только вторую группу"),
        nl,
        write("4 - Вывести старост"),
        nl,
        write("5 - Вывести оценки первой группы"),
        nl,
        write("6 - Вывести оценки второй группы"),
        nl,
        write("7 - Вывести хорошистов и отличников первой группы"),
        nl,
        write("8 - Вывести хорошистов и отличников второй группы"),
        nl,
        write("9 - Вывести список студентов первой группы"),
        nl,
        write("10 - Вывести список студентов второй группы"),
        nl,
        write("11 - Вывести список оценок студентов первой группы"),
        nl,
        write("12 - Вывести список оценок студентов второй группы"),
        nl,
        write("13 - Вывести средний балл первой группы"),
        nl,
        write("14 - Вывести средний балл второй группы"),
        nl,
        write("15 - Вывести максимальный балл первой группы"),
        nl,
        write("16 - Вывести минимальный балл второй группы"),
        nl,
        Number = stdio::readLine(),
        if Number = "1" then
            каждый_студент_первой_группы(),
            каждый_студент_второй_группы(),
            давайте_задействуем_программу()
        elseif Number = "2" then
            каждый_студент_первой_группы(),
            давайте_задействуем_программу()
        elseif Number = "3" then
            каждый_студент_второй_группы(),
            давайте_задействуем_программу()
        elseif Number = "4" then
            вывести_старост(),
            давайте_задействуем_программу()
        elseif Number = "5" then
            оценки_первой_группы(),
            давайте_задействуем_программу()
        elseif Number = "6" then
            оценки_второй_группы(),
            давайте_задействуем_программу()
        elseif Number = "7" then
            отличники_и_хорошисты_первой_группы(),
            давайте_задействуем_программу()
        elseif Number = "8" then
            отличники_и_хорошисты_второй_группы(),
            давайте_задействуем_программу()
        elseif Number = "9" then
            число_девять(),
            давайте_задействуем_программу()
        elseif Number = "10" then
            число_десять(),
            давайте_задействуем_программу()
        elseif Number = "11" then
            число_одиннадцать(),
            давайте_задействуем_программу()
        elseif Number = "12" then
            число_двенадцать(),
            давайте_задействуем_программу()
        elseif Number = "13" then
            число_тринадцать(),
            давайте_задействуем_программу()
        elseif Number = "14" then
            число_четырнадцать(),
            давайте_задействуем_программу()
        elseif Number = "15" then
            число_пятнадцать(),
            давайте_задействуем_программу()
        elseif Number = "16" then
            число_шеснадцать(),
            давайте_задействуем_программу()
        end if.

clauses
    run() :-
        file::consult("../consult.txt", footballDb),
        fail.
    run() :-
        давайте_задействуем_программу().

end implement main

goal
    console::run(main::run).
