% Copyright
/*
Студенты, группы,
факультеты, старосты,
стипендии, успеваемость
*/

implement main
    open core, file, stdio

/*здесь у нас находятся факты, с которыми мы будем в последствии работать*/

class facts - studentyNFI
    студент : (string Номер_студ_билета, string ФИО, string Телефон, integer Группа).
    группа : (string Напраление, integer Номер).
    список_старост : (string Номер_студ_билета_старосты, string ФИО_старосты, string Телефон_старосты, integer Группа).
    предмет : (integer Id, string Название, integer Напраление).
    все_оценки : (string Оценки).

/*здесь мы расписываем наши факты*/

clauses
    студент("1032215421", "Абдулфазов Мансур", "89167854532", 1).
    студент("1032216443", "Айрапетян Мария Сергеевна", "89186714665", 1).
    студент("1032205541", "Алламе Ормиз", "89169789687", 1).
    студент("1032216433", "Аристова Арина Олеговна", "89185678943", 1).
    студент("1032216432", "Бабенко Артём Сергеевич", "89197576893", 1).
    студент("1032212964", "Бекбузарова Роза Алисхановна", "88005553535", 1).
    студент("1032214711", "Бердыев Эзиз", "88007775656", 1).
    студент("1032216434", "Гайдамака Елизавета Александровна", "89195445634", 1).
    студент("1032198039", "Гань Чжаолун", "87009898578", 1).
    студент("1032216438", "Гарут Александр Игоревич", "88005553636", 1).
    студент("1032216444", "Гнатюк Анастасия Станиславовна", "88003335656", 1).
    студент("1032219249", "Гэинэ Андрей", "89169157898", 1).
    студент("1032217044", "Коняева Марина Александровна", "88009999999", 1).
    студент("1032216436", "Кузнецов Василий Юрьевич", "89169998989", 2).
    студент("1032216446", "Лебедева Ольга Андреевна", "88007887878", 2).
    студент("1032216447", "Легиньких Галина Андреевна", "89169136754", 2).
    студент("1032215469", "Негматуллаев Бежан Шухратович", "89197654979", 2).
    студент("1032216437", "Парфёнова Елизавета Евгеньевна", "89167854588", 2).
    студент("1032216449", "Перевощиков Даниил Алексеевич", "88007773773", 2).
    студент("1032216441", "Рытов Алексей Константинович", "89198785321", 2).

    группа("Фундаментальная информатика и информационные технологии", 1).
    группа("Прикладная информатика", 2).

    список_старост("1032217044", "Коняева Марина Александровна", "88009999999", 1).
    список_старост("1032216446", "Лебедева Ольга Андреевна", "88007887878", 2).

    предмет(1, "Логпрог", 1).
    предмет(2, "Вычислительные системы", 1).
    предмет(3, "Java", 1).
    предмет(4, "Иностранный язык", 2).
    предмет(5, "Физическая культура", 2).
    предмет(6, "Естествознание", 2).

    все_оценки("2").
    все_оценки("3").
    все_оценки("4").
    все_оценки("5").

/*здесь мы записываем наши функции, в скобках записываем объекты, с которыми будет работать наши функции*/

class predicates
    /*состав : (string Название_блюда) nondeterm.
    исп_пр : (string Название_продукта) nondeterm.
    калорийность : (string Название_блюда) nondeterm.
    калор_расш : (string Название_блюда) failure.*/
    давайте_задействуем_программу : ().
    вывести_старост : ().
    каждый_студент_первой_группы : ().
    каждый_студент_второй_группы : ().
    оценки_первой_группы : ().
    оценки_второй_группы : ().
    отличники_и_хорошисты_первой_группы : ().
    отличники_и_хорошисты_второй_группы : ().

/соотвественно здесь мы и расписываем наши функции*/

clauses
/эта функция для вывода студентов первой группы*/
    каждый_студент_первой_группы() :-
        студент(Студак, ФиО, Тел, 1),
        write(Студак, "|", ФиО, "|", Тел),
        nl.
        /*fail.*/
/эта функция для вывода студентов второй группы*/
    каждый_студент_второй_группы() :-
        студент(Студак, ФиО, Тел, 2),
        write(Студак, "|", ФиО, "|", Тел),
        nl.
        /*fail.*/
/эта функция для вывода старост*/
    вывести_старост() :-
        список_старост(Номер_студ_билета, Имя, Тел, Группа),
        write(Имя, "|", Номер_студ_билета, "|", Группа),
        nl.
        /*fail.*/
/эта функция для вывода оценок студентов первой группы*/
    оценки_первой_группы() :-
        студент(Студак, ФиО, Тел, 1),
        все_оценки(Оценочка),
        предмет(Номер, Предмет, 1),
        write(Студак, "|", Оценочка, "|", Предмет),
        nl.
        /*fail.*/
/эта функция для вывода оценок студентов второй группы*/
    оценки_второй_группы() :-
        студент(Студак, ФиО, Тел, 2),
        все_оценки(Оценочка),
        предмет(Номер, Предмет, 2),
        write(Студак, "|", Оценочка, "|", Предмет),
        nl.
        /*fail.*/
/эта функция для вывода студентов-отличников первой группы*/
    отличники_и_хорошисты_первой_группы() :-
        предмет(Номер, Предмет, 1),
        студент(Студак, ФиО, Тел, 1),
        все_оценки(Оценки),
        if Оценки = "4" then
            write(Предмет, "|", ФиО, "|", 1, "|", Оценки)
        elseif Оценки = "5" then
            write(Предмет, "|", ФиО, "|", 1, "|", Оценки)
        end if,
        nl.
        /*fail.*/
/эта функция для вывода студентов-отличников второй группы*/
    отличники_и_хорошисты_второй_группы() :-
        предмет(Номер, Предмет, 2),
        студент(Студак, ФиО, Тел, 2),
        все_оценки(Оценки),
        if Оценки = "4" then
            write(Предмет, "|", ФиО, "|", 2, "|", Оценки)
        elseif Оценки = "5" then
            write(Предмет, "|", ФиО, "|", 2, "|", Оценки)
        end if,
        nl.
        /*fail.*/
/*здесь мы пишем функцию с подсказками*/
    давайте_задействуем_программу() :-
        write("Привет! У меня есть некий список моих одногруппников. Давай поработаем с ними? :)"),
        nl,
        write("Выбирай, что будем мы с тобой делать?"),
        nl,
        write("1 - Вывести список всех студентов"),
        nl,
        write("2 - Вывести только первую группу"),
        nl,
        write("3 - Вывести только вторую группу"),
        nl,
        write("4 - Вывести старост"),
        nl,
        write("5 - Вывести оценки первой группы"),
        nl,
        write("6 - Вывести оценки второй группы"),
        nl,
        write("7 - Вывести хорошистов и отличников первой группы"),
        nl,
        write("8 - Вывести хорошистов и отличников второй группы"),
        nl,
        Number = stdio::readLine(),
        if Number = "1" then
            каждый_студент_первой_группы(),
            каждый_студент_второй_группы(),
            давайте_задействуем_программу()
        elseif Number = "2" then
            каждый_студент_первой_группы(),
            давайте_задействуем_программу()
        elseif Number = "3" then
            каждый_студент_второй_группы(),
            давайте_задействуем_программу()
        elseif Number = "4" then
            вывести_старост(),
            давайте_задействуем_программу()
        elseif Number = "5" then
            оценки_первой_группы(),
            давайте_задействуем_программу()
        elseif Number = "6" then
            оценки_второй_группы(),
            давайте_задействуем_программу()
        elseif Number = "7" then
            отличники_и_хорошисты_первой_группы(),
            давайте_задействуем_программу()
        elseif Number = "8" then
            отличники_и_хорошисты_второй_группы(),
            давайте_задействуем_программу()
        end if.
    run() :-
        давайте_задействуем_программу().

end implement main

goal
    console::run(main::run).
